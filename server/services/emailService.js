const nodemailer = require('nodemailer');
const { AppError } = require('../middlewares/errorHandler');
const { ERROR_CODES } = require('../config/constants');

class EmailService {
  constructor() {
    // Gmail SMTP configuration v·ªõi credentials t·ª´ user
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'galangboy82@gmail.com',
        pass: 'mjrvlcmjhwhrhhjm' // App password kh√¥ng c√≥ kho·∫£ng tr·∫Øng
      }
    });

    // Verify connection on startup
    this.verifyConnection();
  }

  /**
   * Verify email connection
   */
  async verifyConnection() {
    try {
      await this.transporter.verify();
      console.log('‚úÖ Email service connected successfully');
    } catch (error) {
      console.error('‚ùå Email service connection failed:', error.message);
    }
  }

  /**
   * Send forgot password email
   * @param {string} to - Recipient email
   * @param {string} name - User name
   * @param {string} resetToken - Password reset token
   * @param {string} resetUrl - Complete reset URL
   */
  async sendForgotPasswordEmail(to, name, resetToken, resetUrl) {
    try {
      const mailOptions = {
        from: {
          name: 'FINO STORE - Th·ªùi trang hi·ªán ƒë·∫°i',
          address: 'galangboy82@gmail.com'
        },
        to: to,
        subject: `üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u t√†i kho·∫£n FINO STORE - ${name}`,
        html: this.getForgotPasswordTemplate(name, resetUrl, resetToken)
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ Forgot password email sent:', {
        to: to,
        messageId: result.messageId
      });

      return {
        success: true,
        messageId: result.messageId
      };
    } catch (error) {
      console.error('‚ùå Send forgot password email error:', error);
      throw new AppError('Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u', ERROR_CODES.INTERNAL_ERROR);
    }
  }

  /**
   * Send order confirmation email
   * @param {string} to - Customer email
   * @param {string} customerName - Customer name
   * @param {Object} orderData - Order information
   */
  async sendOrderConfirmationEmail(to, customerName, orderData) {
    const PDFService = require('./pdfService');
    const pdfService = new PDFService();
    
    try {
      console.log('üìß Starting to send order confirmation email to:', to);
      console.log('üì¶ Order data preview:', {
        orderCode: orderData.orderCode,
        total: orderData.finalTotal,
        itemCount: orderData.items?.length
      });

      // Generate PDF invoice
      console.log('üìÑ Generating PDF invoice...');
      const pdfBuffer = await pdfService.generateOrderInvoicePDF(orderData);
      console.log('‚úÖ PDF invoice generated successfully');

      const mailOptions = {
        from: {
          name: 'FINO STORE - Th·ªùi trang hi·ªán ƒë·∫°i',
          address: 'galangboy82@gmail.com'
        },
        to: to,
        subject: `üõçÔ∏è X√°c nh·∫≠n ƒë∆°n h√†ng #${orderData.orderCode} - FINO STORE`,
        html: this.getOrderConfirmationTemplate(customerName, orderData),
        attachments: [
          {
            filename: `HoaDon_${orderData.orderCode}.pdf`,
            content: pdfBuffer,
            contentType: 'application/pdf'
          }
        ]
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ Order confirmation email sent:', {
        to: to,
        orderCode: orderData.orderCode,
        messageId: result.messageId
      });

      // Close PDF service
      await pdfService.close();

      return {
        success: true,
        messageId: result.messageId
      };
    } catch (error) {
      console.error('‚ùå Send order confirmation email error:', error);
      // Make sure to close PDF service even on error
      await pdfService.close();
      throw new AppError('Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng', ERROR_CODES.INTERNAL_ERROR);
    }
  }

  /**
   * Forgot password email template - Fino Store
   */
  getForgotPasswordTemplate(name, resetUrl, resetToken) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Fino Store</title>
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                line-height: 1.6; 
                color: #333; 
                margin: 0; 
                padding: 0;
                background-color: #f8fafc;
            }
            .container { 
                max-width: 600px; 
                margin: 20px auto; 
                background: white;
                border-radius: 12px;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
                overflow: hidden;
            }
            .header { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; 
                padding: 40px 30px; 
                text-align: center;
            }
            .header h1 {
                margin: 0;
                font-size: 28px;
                font-weight: 700;
                text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .brand {
                font-size: 18px;
                margin-top: 8px;
                opacity: 0.9;
                font-weight: 500;
            }
            .content { 
                padding: 40px 30px; 
                background: white;
            }
            .greeting {
                font-size: 20px;
                color: #2d3748;
                margin-bottom: 20px;
                font-weight: 600;
            }
            .btn { 
                display: inline-block; 
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white !important;
                padding: 16px 32px; 
                text-decoration: none; 
                border-radius: 8px; 
                margin: 25px 0; 
                font-weight: 600;
                font-size: 16px;
                text-align: center;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
                transition: all 0.3s ease;
            }
            .btn:hover { 
                background: linear-gradient(135deg, #5a67d8, #6b46c1);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
                transform: translateY(-2px);
            }
            .btn-container {
                text-align: center;
                margin: 30px 0;
            }
            .footer { 
                text-align: center; 
                padding: 30px; 
                background: #f8fafc;
                color: #718096; 
                font-size: 14px;
                border-top: 1px solid #e2e8f0;
            }
            .warning { 
                background: linear-gradient(135deg, #fed7d7, #feb2b2);
                border-left: 4px solid #f56565; 
                padding: 20px; 
                margin: 25px 0; 
                border-radius: 8px;
                color: #742a2a;
            }
            .warning h3 {
                margin: 0 0 10px 0;
                color: #c53030;
                font-size: 16px;
            }
            .code-box { 
                background: #f7fafc; 
                padding: 20px; 
                border-radius: 8px; 
                font-family: 'Courier New', monospace; 
                word-break: break-all;
                border: 2px dashed #cbd5e0;
                color: #4a5568;
                font-size: 14px;
            }
            .token-display {
                background: linear-gradient(135deg, #e6fffa, #b2f5ea);
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 20px 0;
                border: 2px solid #38b2ac;
            }
            .token-display code {
                background: #2d3748;
                color: #e2e8f0;
                padding: 8px 12px;
                border-radius: 6px;
                font-weight: 600;
                letter-spacing: 1px;
            }
            .divider {
                margin: 35px 0;
                border: none;
                border-top: 2px solid #e2e8f0;
            }
            .support-info {
                background: #f0fff4;
                padding: 20px;
                border-radius: 8px;
                border-left: 4px solid #48bb78;
                margin: 25px 0;
            }
            .logo {
                font-size: 32px;
                font-weight: 800;
                background: linear-gradient(135deg, #667eea, #764ba2);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                margin-bottom: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">FINO STORE</div>
                <h1>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                <div class="brand">Th·ªùi trang hi·ªán ƒë·∫°i & Phong c√°ch</div>
            </div>
            <div class="content">
                <div class="greeting">Xin ch√†o ${name}!</div>
                <p style="font-size: 16px; color: #4a5568; margin-bottom: 20px;">
                    Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i <strong style="color: #667eea;">Fino Store</strong>.
                </p>
                <p style="font-size: 16px; color: #4a5568;">
                    ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† ti·∫øp t·ª•c mua s·∫Øm, vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:
                </p>
                
                <div class="btn-container">
                    <a href="${resetUrl}" class="btn">üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u ngay</a>
                </div>
                
                <div class="warning">
                    <h3>‚ö†Ô∏è Th√¥ng tin quan tr·ªçng</h3>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li><strong>Link s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t</strong> ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t</li>
                        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
                        <li>Kh√¥ng chia s·∫ª link v·ªõi b·∫•t k·ª≥ ai ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n</li>
                        <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu b·∫°n nghi ng·ªù c√≥ ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng</li>
                    </ul>
                </div>
                
                <p style="font-size: 15px; color: #4a5568; margin-top: 25px;">
                    <strong>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông,</strong> b·∫°n c√≥ th·ªÉ copy v√† paste link sau v√†o tr√¨nh duy·ªát:
                </p>
                <div class="code-box">${resetUrl}</div>
                
                <div class="token-display">
                    <p style="margin: 0 0 10px 0; font-weight: 600; color: #2d3748;">M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                    <code>${resetToken}</code>
                </div>
                
                <hr class="divider">
                
                <div class="support-info">
                    <h3 style="margin: 0 0 10px 0; color: #2f855a;">üéß C·∫ßn h·ªó tr·ª£?</h3>
                    <p style="margin: 0; color: #2f855a;">
                        ƒê·ªôi ng≈© Fino Store lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7<br>
                        üìß Email: <strong>support@finostore.com</strong><br>
                        üìû Hotline: <strong>1900-FINO (3466)</strong>
                    </p>
                </div>
            </div>
            <div class="footer">
                <div style="margin-bottom: 15px;">
                    <strong style="color: #667eea; font-size: 18px;">FINO STORE</strong>
                </div>
                <p style="margin: 5px 0;">¬© 2025 Fino Store. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                <p style="margin: 5px 0;">Th·ªùi trang hi·ªán ƒë·∫°i - Phong c√°ch ri√™ng bi·ªát</p>
                <p style="margin: 15px 0 5px 0; font-size: 12px; opacity: 0.8;">
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply tr·ª±c ti·∫øp.
                </p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Order confirmation email template
   */
  getOrderConfirmationTemplate(customerName, orderData) {
    const { orderCode, items, total, finalTotal, address, createdAt, paymentMethod, voucher, discountAmount, shippingFee, _id } = orderData;
    
    // Use order ObjectId for the link, not orderCode
    const orderId = _id || orderData.id;
    
    // Generate items HTML - fixed to use correct data structure
    const itemsHtml = items.map(item => {
      // Extract product info from populated data
      const productName = item.productVariant?.product?.name || 'S·∫£n ph·∫©m';
      const colorName = item.productVariant?.color?.name || '';
      const sizeName = item.productVariant?.size?.name || '';
      
      return `
      <tr>
        <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">
          <div style="font-weight: bold; color: #1f2937;">${productName}</div>
          <small style="color: #6b7280;">
            ${colorName ? `M√†u: ${colorName}` : ''} 
            ${sizeName ? `${colorName ? ' | ' : ''}Size: ${sizeName}` : ''}
          </small>
        </td>
        <td style="padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: center;">
          <strong>${item.quantity}</strong>
        </td>
        <td style="padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: right;">
          <strong>${((item.price || 0) * (item.quantity || 1)).toLocaleString('vi-VN')} ‚Ç´</strong>
        </td>
      </tr>
      `;
    }).join('');

    // Fixed payment method display
    const paymentMethodText = typeof paymentMethod === 'object' ? paymentMethod.method : paymentMethod || 'COD';

    // Voucher discount - use discountAmount from order
    const discountHtml = voucher && discountAmount > 0 ? `
      <tr>
        <td colspan="2" style="text-align: right; padding: 10px; color: #1e40af;">
          Gi·∫£m gi√° (${voucher.code || voucher}):
        </td>
        <td style="text-align: right; padding: 10px; color: #1e40af;">
          -${(discountAmount || 0).toLocaleString('vi-VN')} ‚Ç´
        </td>
      </tr>
    ` : '';

    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>X√°c nh·∫≠n ƒë∆°n h√†ng</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 650px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #1E40AF, #1D4ED8); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }
            .content { padding: 0; background: #f9fafb; }
            .section { background: white; margin: 0; padding: 25px; border-bottom: 1px solid #e5e7eb; }
            .section:last-child { border-bottom: none; border-radius: 0 0 8px 8px; }
            .table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .table th { background: #f9fafb; padding: 15px 12px; text-align: left; font-weight: bold; color: #374151; }
            .table td { padding: 12px; border-bottom: 1px solid #e5e7eb; }
            .total-row { background: #eff6ff; border-top: 2px solid #1e40af; }
            .footer { text-align: center; padding: 25px; color: #6b7280; font-size: 13px; background: #f9fafb; }
            .success-badge { background: #dbeafe; color: #1e40af; padding: 8px 16px; border-radius: 20px; font-size: 14px; display: inline-block; margin: 10px 0; }
            .order-code { background: #1e40af; color: white; padding: 8px 16px; border-radius: 6px; font-weight: bold; }
            .btn { display: inline-block; background: #1e40af; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 15px 0; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h1>
                <div class="success-badge">Thanh to√°n th√†nh c√¥ng</div>
            </div>
            
            <div class="content">
                <div class="section">
                    <h2 style="color: #1f2937; margin-top: 0;">C·∫£m ∆°n b·∫°n ${customerName}!</h2>
                    <p style="color: #4b5563; font-size: 16px;">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v√† thanh to√°n th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω v√† giao h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</p>
                    
                    <div style="background: #eff6ff; padding: 20px; border-radius: 8px; border-left: 4px solid #1e40af;">
                        <p style="margin: 0;"><strong style="color: #1e40af;">M√£ ƒë∆°n h√†ng:</strong> <span class="order-code">${orderCode}</span></p>
                        <p style="margin: 10px 0 0 0;"><strong style="color: #1e40af;">Ng√†y ƒë·∫∑t:</strong> ${new Date(createdAt).toLocaleString('vi-VN')}</p>
                        <p style="margin: 10px 0 0 0;"><strong style="color: #1e40af;">Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${paymentMethodText}</p>
                    </div>
                </div>

                <div class="section">
                    <h3 style="color: #1f2937; margin-top: 0;">ƒê·ªãa ch·ªâ giao h√†ng</h3>
                    <div style="background: #f9fafb; padding: 15px; border-radius: 6px; border: 1px solid #e5e7eb;">
                        <p style="margin: 0; font-weight: bold; color: #1f2937;">${address.fullName}</p>
                        <p style="margin: 5px 0; color: #4b5563;">üìû ${address.phone}</p>
                        <p style="margin: 5px 0 0 0; color: #4b5563;">
                            üìç ${address.addressLine}<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;${address.ward}, ${address.district}, ${address.city}
                        </p>
                    </div>
                </div>

                <div class="section">
                    <h3 style="color: #1f2937; margin-top: 0;">üõçÔ∏è Chi ti·∫øt ƒë∆°n h√†ng</h3>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>S·∫£n ph·∫©m</th>
                                <th style="text-align: center; width: 100px;">S·ªë l∆∞·ª£ng</th>
                                <th style="text-align: right; width: 120px;">Th√†nh ti·ªÅn</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                            <tr>
                                <td colspan="2" style="text-align: right; padding: 10px;">
                                    T·∫°m t√≠nh:
                                </td>
                                <td style="text-align: right; padding: 10px;">
                                    ${total.toLocaleString('vi-VN')} ‚Ç´
                                </td>
                            </tr>
                            ${discountHtml}
                            <tr>
                                <td colspan="2" style="text-align: right; padding: 10px;">
                                    Ph√≠ v·∫≠n chuy·ªÉn:
                                </td>
                                <td style="text-align: right; padding: 10px;">
                                    ${(shippingFee || 0).toLocaleString('vi-VN')} ‚Ç´
                                </td>
                            </tr>
                            <tr class="total-row">
                                <td colspan="2" style="text-align: right; padding: 20px; font-size: 18px;">
                                    <strong>T·ªïng thanh to√°n:</strong>
                                </td>
                                <td style="text-align: right; padding: 20px; font-size: 18px; color: #1e40af;">
                                    <strong>${finalTotal.toLocaleString('vi-VN')} ‚Ç´</strong>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="section">
                    <h3 style="color: #1f2937; margin-top: 0;">Theo d√µi ƒë∆°n h√†ng</h3>
                    <p>B·∫°n c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i ƒë∆°n h√†ng v√† l·ªãch s·ª≠ mua h√†ng t·∫°i:</p>
                    <div style="text-align: center;">
                        <a href="http://localhost:3002/orders/${orderId}" style="display: inline-block; background: #1e40af; color: white !important; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 15px 0; font-weight: bold;">Xem ƒë∆°n h√†ng c·ªßa t√¥i</a>
                    </div>
                    <p style="color: #6b7280; font-size: 14px; text-align: center;">
                        Ch√∫ng t√¥i s·∫Ω g·ª≠i email th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao th√†nh c√¥ng.
                    </p>
                </div>
            </div>
            
            <div class="footer">
                <p><strong>FINO STORE</strong> - C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞∆°ng v√† mua s·∫Øm!</p>
                <p>¬© 2025 FINO STORE. All rights reserved.</p>
                <p>Li√™n h·ªá h·ªó tr·ª£: <a href="mailto:galangboy82@gmail.com">galangboy82@gmail.com</a> | Hotline: 0901196480</p>
                <p style="font-size: 11px; margin-top: 15px;">
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông. Vui l√≤ng kh√¥ng reply tr·ª±c ti·∫øp v√†o email n√†y.
                </p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Send test email ƒë·ªÉ ki·ªÉm tra connection
   */
  async sendTestEmail(to) {
    try {
      const mailOptions = {
        from: {
          name: 'DATN E-Commerce Test',
          address: 'galangboy82@gmail.com'
        },
        to: to,
        subject: '‚úÖ Test Email - DATN E-Commerce Service',
        html: `
          <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 500px; margin: 0 auto;">
            <h2 style="color: #1e40af;">üéâ Email Service ho·∫°t ƒë·ªông th√†nh c√¥ng!</h2>
            <p>ƒê√¢y l√† email test ƒë·ªÉ x√°c nh·∫≠n r·∫±ng DATN E-Commerce email service ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng.</p>
            <div style="background: #eff6ff; padding: 15px; border-radius: 8px; border-left: 4px solid #1e40af;">
              <p><strong>‚úÖ K·∫øt n·ªëi Gmail th√†nh c√¥ng</strong></p>
              <p><strong>‚úÖ C·∫•u h√¨nh SMTP ho·∫°t ƒë·ªông</strong></p>
              <p><strong>‚úÖ S·∫µn s√†ng g·ª≠i email th·ª±c t·∫ø</strong></p>
            </div>
            <p style="color: #6b7280; font-size: 14px; margin-top: 20px;">
              G·ª≠i l√∫c: ${new Date().toLocaleString('vi-VN')}
            </p>
          </div>
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Test email sent successfully:', result.messageId);
      
      return { 
        success: true, 
        messageId: result.messageId,
        message: 'Test email sent successfully'
      };
    } catch (error) {
      console.error('‚ùå Test email error:', error);
      throw error;
    }
  }
}

module.exports = EmailService;
